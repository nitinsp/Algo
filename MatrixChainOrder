import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


/**
 * Created by nitin on 6/12/16.
 */

public class MatrixChainMultiplication {
    static int[][] s;
    static int[][] m;

    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        // number of matrices
        int n = 4;
        int[] p = {5,6,4,3,2};
        computeMatrixChainOrder(p);
        for( int i=1;i<=n;i++) {
            for(int j = 1;j<=n;j++) {
                if(j>i)
                System.out.print(m[i][j]+" ");
                else
                    System.out.print("   ");

            }
            System.out.println();
        }
        printOptimalParent(1,n);
    }

    private static void printOptimalParent(int i, int j) {
        if ( i == j ) {
            System.out.print("A"+i);
        }
        else {
            System.out.print("(");
            printOptimalParent(i,s[i][j]);
            printOptimalParent(s[i][j]+1,j);
            System.out.print(")");
        }
    }

    public static void computeMatrixChainOrder(int[] p) {

        int n = p.length - 1;
        m = new int[n+1][n+1];
        s = new int[n+1][n+1];

        for( int l =2; l<=n ; l++) {
            for( int i =1 ; i<=(n-l+1); i++ ) {
                int j = i + l - 1;
                m[i][j] = Integer.MAX_VALUE;
                for( int k = i ; k<j; k++) {
                    int q = m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];
                    if( q < m[i][j] ) {
                        m[i][j] = q;
                        s[i][j] = k;
                    }
                }

            }
        }

    }

}

